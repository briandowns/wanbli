#!/usr/bin/env dictu

import System;

from "wanbli.du" import Wanbli, JsonResponse;
from "middleware/auth.du" import TokenAuth;
from "middleware/cache.du" import Cache;
from "logger.du" import Log;


@Controller("/api/v1/books")
class Books {
    private store;

    init(store) {
        this.store = store;
    }
 
    @Post
    @Secure("TokenAuth")
    new(request) {
        this.store = this.store.merge(request.body);
        return this.store;
    }

    @Put
    @Secure("TokenAuth")
    update(request) {
        this.store = this.store.merge(request.body);
        return this.store;
    }

    @Get
    retrieve(request) {
        if (request.query.exists("id")) {
            const key = request.query.get("id");
            return {
                key: this.store.get(key)
            };
        }
        
        return {};
    }

    @Get("/all")
    @Cache
    all(request) {
        return this.store;
    }
}

{ // main
    const logger = Log();
    logger.info("Starting application");

    var store = {
        "0": "The Stranger",
        "1": "The Martian Chronicles",
        "2": "1984",
        "3": "A Universe From Nothing"
    };
    
    const wanbli = Wanbli("0.0.0.0", 8080);

    const tokenAuth = TokenAuth("X-Library-Auth", "asdf");
    const cache = Cache();
    wanbli.addMiddleware(tokenAuth, cache);

    const controllers = [Books(store)];
    controllers.forEach(def(c) => {
        const ret = wanbli.addController(c);
        if (not ret.success()) {
            logger.error(ret.unwrapError());
            System.exit(1);
        }
    });

    const error = wanbli.start();

    if (error) {
        print(error.unwrapError());
        System.exit(1);
    }

    System.exit(0);
}
