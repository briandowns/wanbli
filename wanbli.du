import Base64;
import Datetime;
import Hashlib;
import HTTP;
import JSON;
import Socket;
import System;

import "dson.du" as dson;
from "logger.du" import Log;


class Route {
    init(var verb, var route, var callback) {
        this.middleware = [];
    }

    setMiddleware(mw) {
        this.middleware.push(mw);
    }
}

const statusCodes = {
    // 2xx
    HTTP.STATUS_CODE_OK: HTTP.STATUS_MESSAGE_OK,
    HTTP.STATUS_CODE_CREATED: HTTP.STATUS_MESSAGE_CREATED,
    // 3xx
    HTTP.STATUS_CODE_MOVED_PERMANENTLY: HTTP.STATUS_MESSAGE_MOVED_PERMANENTLY,
    // 4xx
    HTTP.STATUS_CODE_BAD_REQUEST: HTTP.STATUS_MESSAGE_BAD_REQUEST,
    HTTP.STATUS_CODE_UNAUTHORIZED: HTTP.STATUS_MESSAGE_BAD_REQUEST,
    HTTP.STATUS_CODE_FORBIDDEN: HTTP.STATUS_MESSAGE_FORBIDDEN,
    HTTP.STATUS_CODE_NOT_FOUND: HTTP.STATUS_MESSAGE_NOT_FOUND,
    // 5xx
    HTTP.STATUS_CODE_INTERNAL_SERVER_ERROR: HTTP.STATUS_MESSAGE_INTERNAL_SERVER_ERROR
};


// Request class is the base for all Wanbli request data and handles
// request processing.
class Request {
    init(data) {
        print(data);
        const rawData = data.split("\r\n\r\n");
        const headers = rawData[0].split("\r\n");
        const body = rawData[1];
        
        const routeData = headers[0].split(" ");

        this.verb = routeData[0];
        
        this.headers = {};
        this.body = {};
        this.start = System.clock();

        this.parseUrl(routeData[1]);
        this.parseHeaders(headers);

        if (this.verb == HTTP.METHOD_POST or this.verb == HTTP.METHOD_PUT or this.verb == HTTP.METHOD_PATCH) {
            if (this.headers.get("Content-Length") != 0) {
                this.parseJsonBody(body);
            }
        }
    }

    parseUrl(route) {
        this.query = {};

        const url = route.split("?");
        this.route = url[0];

        if (url.len() == 1) {
            // no query parameters
            return;
        }

        const parameters = url[1].split("&");

        parameters.forEach(def (parameter) => {
            const variable = parameter.split("=");

            if (variable.len() == 2) {
                this.query[variable[0]] = variable[1];
            } else {
                this.query[variable[0]] = nil;
            }
        });
    }

    private parseHeaders(headers) {
        print(headers);
        for (var i = 1; i < headers.len(); i += 1) {
            const headerData = headers[i].split(":", 1);
            this.headers[headerData[0]] = headerData[1].strip();
        }
    }

    private parseBody(body) {
        body.split("&").forEach(def (element) => {
            const variable = element.split("=");
            this.body[variable[0]] = variable[1];
        });
    }

    private parseJsonBody(body) {
        this.body = JSON.parse(body).unwrap();
    }
}

// BaseResponse is the base for all Wanbli responses and extended
// with functionality and data when inhereted.
abstract class BaseResponse {
    init() {
        this.headers = {
            "Server": "Wanbli",
            "Connection": "close",
            "Content-Type": "text/html"
        };
    }

    addHeader(key, value) {
        this.headers[key] = value;
    }

    setCookie(value, httpOnly=true, secure=false) {
        this.headers["Set-Cookie"] = "{}{}{}".format(
            value,
            httpOnly ? "; HttpOnly" : "",
            secure ? "; Secure" : ""
        );
    }

    send(client) {
        var responseHeaders = "HTTP/1.1 {}\r\nDate: {}\r\n"
            .format(this.status, Datetime.strftime("%a, %d %b %Y %H:%M:%S"));
        
        this.headers.keys().forEach(def (key) => {
            responseHeaders += "{}: {}\r\n".format(key, this.headers[key]);
        });

        client.write(responseHeaders + "\r\n" + this.content);
    }
}

// Response
class Response < BaseResponse {
    init(content, status=HTTP.STATUS_CODE_OK) {
        super.init();

        this.content = content;
        this.status = status;

        this.headers["Content-Length"] = content.len();
    }
}

// JsonResponse
class JsonResponse < BaseResponse {
    init(content, status=200) {
        super.init();

        //this.content = JSON.stringify(content).unwrap();
        const d = dson.Dson();
        if (["number", "string", "set", "list", "dict"].contains(type(content))) {
            this.content = JSON.stringify(content).unwrap();
        } else {
            this.content = d.stringify(content).unwrap();
        }
        this.status = status;

        this.headers["Content-Length"] = this.content.len();
        this.headers["Content-Type"] = "application/json";
    }
}

// ErrorResponse
class ErrorResponse < BaseResponse {
    init(content="", status=HTTP.STATUS_CODE_INTERNAL_SERVER_ERROR) {
        super.init();

        this.content = content;
        this.status = statusCodes[status];
        this.headers["Content-Length"] = content.len();
    }
}

// Server
class Server {
    const HTTP_DELIMITER = "\r\n\r\n";

    init(var callback, private host="127.0.0.1", private port=8080) {
        this.socket = nil;
    }

    start() {
        const socket = Socket.create(Socket.AF_INET, Socket.SOCK_STREAM);
        if (not socket.success()) {
            return socket;
        }

        this.socket = socket.unwrap();
        this.socket.setsockopt(Socket.SOL_SOCKET, Socket.SO_REUSEADDR);
        
        if (not this.socket.bind(this.host, this.port).success()) {
            return Error("failed to bind socket");
        }

        this.listen();
    }

    listen() {
        const result = this.socket.listen();
        if (not result.success()) {
            return result.unwrapError();
        }
        
        while {
            const connection = this.socket.accept();
            if (not connection.success()) {
                return result.unwrapError();
            }

            const [client, address] = connection.unwrap();
            this.handleClient(client, address);
        }
    }

    handleClient(client, address) {
        const data = this.getData(client);
        if (data != '') {
            this.callback(client, address, data);
        }
        client.close();
    }

    getData(client, size=2048) {
        var buffer = client.recv(size);

        if (not buffer.success()) {
            return result.unwrapError();
        }

        buffer = buffer.unwrap();

        if (buffer.len() != size) {
            return buffer;
        }

        while {
            const data = client.recv(size);

            if (not data.success()) {
                return result.unwrapError();
            }

            buffer += data.unwrap();

            if (buffer.contains(this.HTTP_DELIMITER)) {
                break;
            }
        }

        return buffer;
    }
}

// Wanbli 
class Wanbli {
    private logger;
    private middleware; 

    init(host="127.0.0.1", var port=8080) {
        this.server = Server(this.response, host, port);
        this.logger = Log();
        this.routes = [];
        this.middleware = {};
        this.sessionHandler = nil;
    }

    // start starts the server.
    start() {
        this.server.start();
    }

    logCall(request, response) {
        print(request.headers);
        // this.logger.info("request/response", 
        // {
        //     "remote-address": request.headers["Host"],
        //     "method": request.verb,
        //     "request-uri": request.route,
        //     "status": response.status,
        //     "user-agent": request.headers["User-Agent"],
        //     "duration": (System.clock()),
        //     "origin": request.headers["Origin"],
        // });
    }

    private send(client, request, response) {
        this.logCall(request, response);
        response.send(client);
    }

    response(client, address, data) {
        const request = Request(data);
        var response = Response(data, 0);

        response = this.dispatch(request);

        if (this.sessionHandler != nil) {
            this.sessionHandler.save(request.session, request.sessionCopy, response);
        }

        this.send(client, request, response);
    }

    private dispatch(request) {
        for (var i = 0; i < this.routes.len(); i += 1) {
            if (this.routes[i].route == request.route and this.routes[i].verb == request.verb) {
                var response;

                const mwCount = this.routes[i].middleware.len();
                if (mwCount > 0) {
                    for (var j = 0; j < mwCount; j += 1) {
                        response = this.routes[i].middleware[j].handle(request, response);
                        if (response != nil) {
                            return response;
                        }
                    }
                }

                response = this.routes[i].callback(request);

                if (type(response) == "string") {
                    response = Response(response);
                } else {
                    response = JsonResponse(response);
                }

                return response;
            }
        }

        return this.notFoundHandler(request);
    }

    notFoundHandler(request) {
        return ErrorResponse(HTTP.STATUS_MESSAGE_NOT_FOUND, HTTP.STATUS_CODE_NOT_FOUND);
    }

    addSessionHandler(handler) {
        this.sessionHandler = handler;
    }

    addMiddleware(...callback) {
        callback.forEach(def(c) => this.middleware[c._name] = c);
    }

    setRoute(route) {
        this.routes.push(route);
    }

    addController(klass) {
        const classRef = klass._class;
        if (classRef.classAnnotations.len() == 0 or not classRef.classAnnotations.exists("Controller")) {
            return Error("'Controller' class annotation required");
        }

        const resourcePath = classRef.classAnnotations.get("Controller");

        for (var i = 0; i < classRef.methods().len(); i += 1) {
            if (classRef.methods()[i] != "init") {
                if (classRef.methodAnnotations.exists(classRef.methods()[i])) {
                    const annotations = classRef.methodAnnotations[classRef.methods()[i]];
                    
                    var path = resourcePath;
                    var verb = "";

                    ["Get", "Post", "Put", "Delete", "Patch", "Connect", "Head", "Options"].forEach(def(v) => {
                        if (annotations.exists(v)) {
                            verb = v.upper();
                            const uri = annotations.get(v);
                            if (uri) {
                                path += uri;
                            }
                        }
                    });

                    var r = Route(verb, path, klass.getAttribute(classRef.methods()[i]));
                    
                    if (classRef.methodAnnotations[classRef.methods()[i]].exists("Secure")) {
                        const authType = classRef.methodAnnotations[classRef.methods()[i]].get("Secure");

                        if (authType == "TokenAuth") {
                            r.middleware.push(this.middleware[authType]);
                        }
                    }

                    this.setRoute(r);
                }
            }
        }

        return Success(0);
    }
}
